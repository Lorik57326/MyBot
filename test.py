import requests
import pandas as pd
import time

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TOKEN = "8033733352:AAHp0TYZ1CJjbjjcNrqiJ53jXHqq4kQbeRI"
CHAT_ID = "462399522"
SPREAD_THRESHOLD = 0.3  # –ü–æ—Ä–æ–≥ —Å–ø—Ä–µ–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (> 0.5%)
MARK_PRICE_THRESHOLD = 0.1  # –ü–æ—Ä–æ–≥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç Mark Price (> 0.2%)
MIN_FUTURES_VOLUME = 100000  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö (100k USDT)
SCAN_INTERVAL = 600  # –í—Ä–µ–º—è –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) - 600 —Å–µ–∫—É–Ω–¥ = 10 –º–∏–Ω—É—Ç

# --- API Binance ---
FUTURES_BOOK_TICKER_URL = "https://fapi.binance.com/fapi/v1/ticker/bookTicker"
SPOT_BOOK_TICKER_URL = "https://api.binance.com/api/v3/ticker/bookTicker"
FUTURES_24HR_URL = "https://fapi.binance.com/fapi/v1/ticker/24hr"
EXCHANGE_INFO_URL = "https://fapi.binance.com/fapi/v1/exchangeInfo"
MARK_PRICE_URL = "https://fapi.binance.com/fapi/v1/premiumIndex"

# --- –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram ---
def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    data = {"chat_id": CHAT_ID, "text": message}
    requests.post(url, data=data)

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ---
def scan_binance():
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä
    try:
        exchange_info = requests.get(EXCHANGE_INFO_URL).json()
        print("–û—Ç–≤–µ—Ç –æ—Ç API Binance:")
        print(exchange_info)  # –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

        if 'symbols' in exchange_info:
            futures_pairs = {symbol['symbol'] for symbol in exchange_info['symbols'] if symbol['contractType'] == 'PERPETUAL'}
        else:
            print("–û—à–∏–±–∫–∞: 'symbols' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ API.")
            return
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö —Å {EXCHANGE_INFO_URL}: {e}")
        return

    print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(futures_pairs)} —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä.")

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24 —á–∞—Å–∞
    try:
        futures_volume_data = requests.get(FUTURES_24HR_URL).json()
        futures_volumes = {item['symbol']: float(item['quoteVolume']) for item in futures_volume_data}
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö —Å {FUTURES_24HR_URL}: {e}")
        return

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–∞—Ä—ã —Å –æ–±—ä–µ–º–æ–º > 100 000 USDT
    filtered_pairs = {symbol for symbol in futures_pairs if futures_volumes.get(symbol, 0) > MIN_FUTURES_VOLUME}
    print(f"–û—Ç–æ–±—Ä–∞–Ω–æ {len(filtered_pairs)} –ø–∞—Ä —Å –æ–±—ä–µ–º–æ–º > {MIN_FUTURES_VOLUME} USDT.")

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã
    try:
        spot_data = requests.get(SPOT_BOOK_TICKER_URL).json()
        futures_data = requests.get(FUTURES_BOOK_TICKER_URL).json()
        mark_price_data = requests.get(MARK_PRICE_URL).json()

        spot_prices = {item['symbol']: float(item['bidPrice']) for item in spot_data}  # –ü–æ–∫—É–ø–∫–∞ –Ω–∞ —Å–ø–æ—Ç–µ (bid)
        futures_prices = {item['symbol']: float(item['askPrice']) for item in futures_data}  # –ü—Ä–æ–¥–∞–∂–∞ –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–µ (ask)
        mark_prices = {item['symbol']: float(item['markPrice']) for item in mark_price_data}  # –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞—è —Ü–µ–Ω–∞
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö —Å –æ–¥–Ω–æ–≥–æ –∏–∑ API: {e}")
        return

    data_list = []

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä—ã
    for symbol in filtered_pairs:
        spot_bid = spot_prices.get(symbol.replace("USDT", "USDT"), None)  # –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ —Å–ø–æ—Ç–µ
        futures_ask = futures_prices.get(symbol, None)  # –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–µ
        mark_price = mark_prices.get(symbol, None)  # –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞—è —Ü–µ–Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞
        volume = futures_volumes.get(symbol, 0)  # –û–±–æ—Ä–æ—Ç –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö

        if spot_bid and futures_ask and mark_price and spot_bid > 0:
            spread = ((futures_ask - spot_bid) / spot_bid) * 100
            deviation_from_mark = ((futures_ask - mark_price) / mark_price) * 100
            data_list.append([symbol, spot_bid, futures_ask, mark_price, round(spread, 2), round(deviation_from_mark, 2), volume])

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram, –µ—Å–ª–∏ —Å–ø—Ä–µ–¥ –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç Mark Price –≤—ã—à–µ –ø–æ—Ä–æ–≥–æ–≤
            if spread > SPREAD_THRESHOLD and deviation_from_mark > MARK_PRICE_THRESHOLD:
                message = (f"‚ö†Ô∏è {symbol} - –ù–∞–π–¥–µ–Ω–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!\n"
                           f"–°–ø–æ—Ç: {spot_bid} USDT\n"
                           f"–§—å—é—á–µ—Ä—Å—ã: {futures_ask} USDT\n"
                           f"Mark Price: {mark_price} USDT\n"
                           f"üìä –°–ø—Ä–µ–¥: {round(spread, 2)}%\n"
                           f"üìà –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç Mark: {round(deviation_from_mark, 2)}%")
                send_telegram_message(message)

    # –°–æ–∑–¥–∞–µ–º DataFrame
    columns = ["–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞", "–°–ø–æ—Ç –ø–æ–∫—É–ø–∫–∞", "–§—å—é—á–µ—Ä—Å –ø—Ä–æ–¥–∞–∂–∞", "Mark Price", "–°–ø—Ä–µ–¥ %", "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç Mark %", "–û–±—ä–µ–º —Ñ—å—é—á–µ—Ä—Å–æ–≤"]
    df = pd.DataFrame(data_list, columns=columns)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–ø—Ä–µ–¥—É
    df = df.sort_values(by="–°–ø—Ä–µ–¥ %", ascending=False)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
    csv_filename = "binance_futures_spread.csv"
    df.to_csv(csv_filename, index=False, encoding='utf-8')

    print(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {csv_filename}")

    # --- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
    send_telegram_message("‚úÖ Binance –∑–∞–≤–µ—Ä—à–∏–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. –ñ–¥—É 10 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.")

# --- –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ---
#while True:
   # scan_binance()
   # print(f"üîÑ –û–∂–∏–¥–∞–Ω–∏–µ {SCAN_INTERVAL // 60} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º...\n")
   # time.sleep(SCAN_INTERVAL)  # –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—É—Å–∫–æ–º
